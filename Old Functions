##########################
"""
##########################################
OLD Functions#############################

def NotNeeded1():
    wb = xw.Book.caller()
    #ws = wb.sheets["notes"]
    ws = wb.sheets['py_inputs']

    # ws.range("C9").value = "Parameters"
    # ws.range("D9").value = "Not Ready"
    # ws.range("E9").value = datetime.datetime.now()
    fileName = ws["O20"].value

    df = pd.read_excel(fileName, sheet_name='py_inputs', skiprows=1,
                       usecols=['Variables Header', 'Chosen Variables'],converters={'Variables Header':str,'Chosen Variables':str})
    df.dropna(inplace=True)
    df.reset_index(drop=True, inplace=True)

    #ws.range("C11").value = df
    #ws.range("G9").value = df.loc[df['Variables Header']=='Week To','Chosen Variables'].values
    # ws.range("F9").value = datetime.datetime.now()
    # ws.range("D9").value = "Ready"
    return df

##########################################
def showGrades_old(df):
    columnNames = ['Grade', 'Cut-Off (Count / Value)']
    df = df[-3:].copy()
    df.columns = columnNames
    df['Grade'] = df.loc[:, ('Grade')].str.replace('Grade', '').astype(int)

    grades = list()
    for x in df.iloc[:, 1]:
        grades.append(x)

    return float(grades[1]), float(grades[2])

"""

##########################################
def weeksCalculation(startWeek, endWeek, maxWeekNo):
    """
    Comments:
    NOT USED
        W raporcie pcal znajdują się wszystkie tygodnie.
        :param startWeek:
        :param endWeek:
        :param maxWeekNo: number of weeks in the year from startWeek variable
        :return:
    """

    list_of_weeks = []
    if int(str(startWeek)[-2:]) > int(str(endWeek)[-2:]):
        weekNumbers = maxWeekNo - int(str(startWeek)[-2:]) + int(str(endWeek)[-2:])
    else:
        weekNumbers = endWeek - startWeek

    weekRatio = 0
    for weeks in range(0,weekNumbers + 1):
        week = startWeek + weeks - weekRatio

        if int(str(week)[-2:]) == 52:
            year = int(str(week)[:4]) + 1
            startWeek = int(str(year) + "01")
            weekRatio = weeks + 1

        list_of_weeks.append(week)
        #print(week)
    return list_of_weeks

##########################################
def getExcelData():
    wb = xw.Book.caller()

    # Downloader (QueryPar)
    ws = wb.sheets['QueryPar2'] # wb.sheets[3]
    dep = ws["C4"].value
    startWeek = ws["T3"].value
    endWeek = ws["T4"].value
    path = ws["C5"].value + "\\"

    # Calculations (py_inputs)
    ws2 = wb.sheets['py_inputs']
    fileName = ws2["O20"].value
    chosenHierarchy = ws2["O5"].value
    MinPar = ws2["O14"].value # or O24??
    eDur = ws2["O25"].value
    wDur = ws2["O26"].value
    sDur = ws2["O27"].value

    return dep, startWeek,endWeek, path, fileName, chosenHierarchy, MinPar, eDur, wDur, sDur

##########################################
def getCalcParam(path,fileName):
    wb = xw.Book.caller()
    ws = wb.sheets["QueryPar2"]

    ws.range("C21").value = "parameters"
    ws.range("C23").value = "Not Ready"
    ws.range("G13").value = datetime.datetime.now()

    df = pd.read_excel(fileName, sheet_name='py_inputs', skiprows=1,
                       usecols=['Variables Header', 'Chosen Variables'],converters={'Variables Header':str,'Chosen Variables':str})
    df = df.dropna()
    df = df[16:]
    df.to_csv(path + "parameters.csv", index=False)

    ws.range("H13").value = datetime.datetime.now()
    ws.range("K13").value = "parameters"
    ws.range("C23").value = "Ready"

##########################################
def runDaxQueries(startWeek,endWeek,dep,dax_query_list,path):

    wb = xw.Book.caller()
    ws = wb.sheets["QueryPar2"]

    ws.range("G3:H20").clear_contents() # clear cells with times
    ws.range("K3:L20").clear_contents() # clear cells with info about the files

    for index, query in enumerate(dax_query_list):

        ws.range("C20").value = dep
        ws.range("C21").value = query.__name__
        ws.range("C23").value = "Not Ready"
        ws.range((index + 3, 7)).value = datetime.datetime.now()

        df = runDaxQuery(startWeek,endWeek,dep,query,path)
        q_name = query.__name__ + '.csv'
        df.to_csv(path + q_name.capitalize(), index=False)

        ws.range((index + 3, 8)).value = datetime.datetime.now()
        ws.range((index + 3, 11)).value = query.__name__
        ws.range("C23").value = "Ready"

##########################################
dax_query_list = [daxQ.grading,daxQ.sku_plu,daxQ.md,daxQ.plu_available,
                     daxQ.promo_reg,daxQ.promo_tv,daxQ.prh_data,daxQ.perf_dep,daxQ.pcal,daxQ.prh]

##########################################
def saveSummary(MODEL_PATH, SHEET_NAME, DF):
    wb = xw.Book(MODEL_PATH) # xw.Book.caller()
    ws = wb.sheets[SHEET_NAME]
    ws.range("B2").value = DF

##########################################
def saveStatus(MODEL_PATH, INSIGHT, VALUE, VALUE_TOTAL):
    STATUS_NO = VALUE + 1

    wb = xw.Book(MODEL_PATH)
    ws = wb.sheets['QueryPar']
    ws.range("E10").value = INSIGHT
    ws.range("E14").value = STATUS_NO/VALUE_TOTAL

    if STATUS_NO == VALUE_TOTAL:
        ws.range("E16").value = 'Ready'
    else:
        ws.range("E16").value = 'Not Ready'

##########################################
def saveStatusNew(MODEL_PATH, df):
    wb = load_workbook(MODEL_PATH)
    ws = wb["Summary"]
    ws["A1"] = df

    wb.save(MODEL_PATH)
